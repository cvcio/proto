syntax = "proto3";

package cvcio.mediawatch.v3.feeds;
// option go_package = "github.com/cvcio/mediawatch/internal/proto/v3/feeds;feeds";

// third party imports
import "google/protobuf/timestamp.proto";
import "tagger/tagger.proto";

// mediawatch specific imports
// import "proto/cvcio/commons/common.proto";

// Feeds are the sources of articles that mediawatch collects.
//
// Each feed holds information about the feed itself as long as 
// various metadata for the feed, such as political stance
// of the source, orientation, country of origin, languages etc..
// Additionaly, each feed is related with one stream and one or more tests. 

// Feed Model
message Feed {
    // Unique auto-increment id
    string id = 1 [(tagger.tags) = "bson:\"_id,omitempty\""];
    // UUID string representation
    string uuid = 2;
    // Feed creation datetime in RFC3339 format
    google.protobuf.Timestamp created_at = 3;
    // Feed update datetime in RFC3339 format
    google.protobuf.Timestamp updated_at = 4;
    // Name of the feed
    string name = 5;
    // Twitter user_name of the feed (if appliccable)
    string user_name = 6;
    // A small description of the feed
    string description = 7;
    // Twitter id_str of the feed (if appliccable)
    string twitter_id = 8;
    // Twitter profile_image_url of the feed (if appliccable), or favicon url
    string icon = 9;
    // Base url of the feed, including trailing slash `/`
    string url = 10;

    // strem fields
    FeedStream stream = 11;
    // localization fields
    FeedLocalization localization = 12;
    // meta fields
    FeedMeta meta = 13;
    // dom fiedlds
    FeedDOM dom = 14;
}

// FeedStream Model
message FeedStream {
    // StreamType Enumeration
    enum StreamType {
        STREAM_TYPE_UNSPECIFIED = 0;
        STREAM_TYPE_OTHER = 1;
        STREAM_TYPE_TWITTER = 2;
        STREAM_TYPE_RSS = 3;
    }
    // stream key to select
    // Can be the twitterId of the feed in case streamType is STREAM_TYPE_TWITTER, 
    // otherwise an ATOM url or feeds url
    string stream_target = 1;
    // Cron like sceduling
    string execute_every = 2;

    // stream type, can be other, twitter or rss
    // currently only twitter is supported
    StreamType stream_type = 3;
    // common status (see common.proto)
    // commons.Status stream_status = 4;
}

// FeedDOM Model
message FeedDOM {
    uint64 id = 14;
    string dom_type = 1;
    string api = 2;
    string title = 3;
    string excerpt = 4;
    string body = 5;
    string authors = 6;
    string sources = 7;
    string tags = 8;
    string categories = 9;
    string published_at = 10;
    string edited_at = 11;
    string timezone_offset = 12;
    string img = 13;
}

// FeedLocalization Model
message FeedLocalization {
     // Locality Enumeration
     enum Locality {
        LOCALITY_UNSPECIFIED = 0;
        LOCALITY_OTHER = 1;
        LOCALITY_LOCAL = 2;
        LOCALITY_NATIONAL = 3;
        LOCALITY_INTERNATIONAL = 4;
        LOCALITY_MIXED = 5;
    }

    string country = 1;
    Locality locality = 2;
    // Feed predefined language code in ISO 639-1 format
    string lang = 3;
}

// FeedMeta Model
message FeedMeta {
    // BusinessType Enumeration
    enum BusinessType {
        BUSINESS_TYPE_UNSPECIFIED = 0;
        BUSINESS_TYPE_OTHER = 1;
        BUSINESS_TYPE_AGENCY = 2;
        BUSINESS_TYPE_ORGANIZATION = 3;
        BUSINESS_TYPE_BLOG = 4;
        BUSINESS_TYPE_PORTAL = 5;
    }

    // ContentType Enumeration
    enum ContentType {
        CONTENT_TYPE_UNSPECIFIED = 0;
        CONTENT_TYPE_OTHER = 1;
        CONTENT_TYPE_NEWS = 2;
        CONTENT_TYPE_MARKET_BUSINESS = 3;
        CONTENT_TYPE_DEFENCE_ARMY_POLICE = 4;
        CONTENT_TYPE_ENTERTAINMENT = 5;
        CONTENT_TYPE_HEALTH_BEAUTY = 6;
        CONTENT_TYPE_SPORTS = 7;
        CONTENT_TYPE_RELIGION = 8;
        CONTENT_TYPE_MIXED = 9;
    }

    // PoliticalOrientation Enumeration
    enum PoliticalOrientation {
        POLITICAL_ORIENTATION_UNSPECIFIED = 0;
        POLITICAL_ORIENTATION_OTHER = 1;
        POLITICAL_ORIENTATION_LEFT = 2;
        POLITICAL_ORIENTATION_CENTER_LEFT = 3;
        POLITICAL_ORIENTATION_CENTER = 4;
        POLITICAL_ORIENTATION_CENTER_RIGHT = 5;
        POLITICAL_ORIENTATION_RIGHT = 6;
        POLITICAL_ORIENTATION_FAR_RIGHT = 7;
    }

    // Tier Enumeration
    enum Tier {
        TIER_UNSPECIFIED = 0;
        TIER_OTHER = 1;
        TIER_TRADITIONAL = 2;
        TIER_DIGITAL = 3;
        TIER_BROADCASTING_TV = 4;
        TIER_BROADCASTING_RADIO = 5;
        TIER_MIXED = 6;
    }
    
    // email (if provvided)
    string email = 1;

    // as suggested by ioanna archontaki (phd@uoa)
    // the purpose of these meta is to correlate feeds
    // by their political context
    BusinessType business_type = 2;
    string business_owner = 3;
    // if the business is registered or not in a 
    // public business registry, association, etc.
    bool business_registered = 4;
    ContentType content_type = 5;
    PoliticalOrientation political_orientation = 6;
    Tier tier = 7;
}


message FeedRequest {
    Feed payload = 1;
}

message FeedResponseSingle {
    Feed result = 1;
}

message FeedResponseList {
    repeated Feed results = 1;
    // commons.Pagination pagination = 2;
}

// FeedService Definition
service FeedService {
    // Create new feed
    rpc Create (FeedRequest) returns (FeedResponseSingle) {};

    // Retrieve feed by uuid
    rpc Retrieve (FeedRequest) returns (FeedResponseSingle) {};
    
    // Update feed by uuid
    rpc Update (FeedRequest) returns (FeedResponseSingle) {};

    // Delete feed by uuid
    rpc Delete (FeedRequest) returns (FeedResponseSingle) {};
    
    // List feeds by query
    rpc List (FeedRequest) returns (FeedResponseList) {};
}