syntax = "proto3";

package proto.cvcio.mediawatch.articles;
// option go_package = "github.com/cvcio/mediawatch/internal";

// third party imports
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
// import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
// mediawatch specific imports
import "proto/cvcio/commons/common.proto";
import "proto/third_party/gorm/options/options.proto";

// Articles ...
//
// ...

// Article Model
message Article {
    option (gorm.opts) = {
        ormable: false
    };
    string uuid = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "UUID string representation."}];
    string lang = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Language code in ISO 639-1 format."}];
    google.protobuf.Timestamp crawled_at = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Article crawled datetime in RFC3339 format."}];
    string source = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Source of the article."}];
    string url = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "URL of the article."}];
    string tweet_id = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Tweet id of the article."}];

}
// ArticleStopWords Model 
message ArticleStopWords {
    string uuid = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "UUID string representation."}];
    string doc_uuid = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Related document uuid."}];
    repeated string tokens = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "StopWords of the document."}];
}

// ArticleStopWords Model 
message ArticleContent {
    string title = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Title of the article."}];
    string excerpt = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Excerpt of the article."}];
    string body = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Body of the article."}];
    repeated string authors = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Authors of the article."}];
    repeated string sources = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Sources of the article."}];
    repeated string tags = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Tags of the article."}];
    repeated string categories = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Categories of the article."}];
    google.protobuf.Timestamp published_at = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Article published datetime in RFC3339 format."}];
    google.protobuf.Timestamp edited_at = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Article edited datetime in RFC3339 format."}];
}

message ArticleRequest {
    Article payload = 1;
}

message ArticleResponseSingle {
    Article result = 1;
}

message ArticleResponseList {
    repeated Article results = 1;
    commons.Pagination pagination = 2;
}


// ArticleService Definition
//
// ...
service ArticleService {
    // Retrieve article by uuid
    rpc Retrieve (ArticleRequest) returns (ArticleResponseSingle) {
        option (google.api.http) = {
            get : "/v3/articles/get/{payload.uuid}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Retrieve a single article by uuid."
        };
    };

    // List articles by query
    rpc List (ArticleRequest) returns (ArticleResponseList) {
        option (google.api.http) = {
            post : "/v3/articles/list"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Retrive a list of articles by a generic query."
        };
    };

    // Stream articles by query
    rpc Stream(ArticleRequest) returns (stream ArticleResponseSingle) {
		option (google.api.http) = {
			get: "/v3/articles/stream"
		};
	};

    // Aggregate articles by query
    rpc Aggregate (ArticleRequest) returns (ArticleResponseList) {
        option (google.api.http) = {
            post : "/v3/articles/aggregate/articles"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Aggregate articles by query."
        };
    };

    // Topics
    rpc GetTopics (ArticleRequest) returns (ArticleResponseList) {
        option (google.api.http) = {
            post : "/v3/articles/aggregate/topics"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Aggregate topics by query."
        };
    };
    
    // Categories
    rpc GetCategories (ArticleRequest) returns (ArticleResponseList) {
        option (google.api.http) = {
            post : "/v3/articles/aggregate/categories"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Aggregate categories by query."
        };
    };
    
    // Authors
    rpc GetAuthors (ArticleRequest) returns (ArticleResponseList) {
        option (google.api.http) = {
            post : "/v3/articles/aggregate/authors"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Aggregate authors by query."
        };
    };

    // Sources
    rpc GetSources (ArticleRequest) returns (ArticleResponseList) {
        option (google.api.http) = {
            post : "/v3/articles/aggregate/sources"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Aggregate sources by query."
        };
    };
}