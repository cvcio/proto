syntax = "proto3";

package ministry;
// option go_package = "github.com/cvcio/proto/internal/ministry;ministry";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

import "tagger/tagger.proto";
// import "proto/third_party/transformer/annotations.proto";

// mediawatch specific imports
// import "proto/cvcio/ministry/auth.proto";
import "proto/cvcio/ministry/resource.proto";
import "proto/cvcio/ministry/session.proto";
// import "proto/cvcio/commons/common.proto";

enum Role {
    // users with unassigned role
    ROLE_UNSPECIFIED = 0;
    // subscribed users
    ROLE_USER = 1;
    // subscribed users within a paid plan
    ROLE_POWERUSER = 2;
    // organization and team admins without write privilleges
    ROLE_ORGMANAGER = 3;
    // organization and team admins with write privilleges
    ROLE_ORGADMIN = 4;
    // admins without privilleged access
    ROLE_ADMIN = 5;
    // admins with privilleged access
    ROLE_SUPERADMIN = 6;
}

message Profile {
    string first_name = 1 [(tagger.tags) = "bson:\"first_name,omitempty\""];
    string last_name = 2 [(tagger.tags) = "bson:\"last_name,omitempty\""];
    string user_name = 3 [(tagger.tags) = "bson:\"user_name,omitempty\""];
    string country = 4 [(tagger.tags) = "bson:\"country,omitempty\""];
    string language = 5 [(tagger.tags) = "bson:\"language,omitempty\""];
    string industry = 6 [(tagger.tags) = "bson:\"industry,omitempty\""];
    string occupation = 7 [(tagger.tags) = "bson:\"occupation,omitempty\""];
    string mobile = 8 [(tagger.tags) = "bson:\"mobile,omitempty\""];
}

message MFA {
    bool enabled = 1;
    enum Device {
        DEVICE_UNSPECIFIED = 0;
        DEVICE_SMS = 1;
        DEVICE_APPLICATION = 2;
        DEVICE_FIDO = 3;
    }
    Device device = 2;
    string token = 3 [(tagger.tags) = "bson:\"token,omitempty\""];
    // 6 tokens long alpha-numeric string
    string otp = 4 [(tagger.tags) = "bson:\"otp,omitempty\""];
}

message Account {
    // UUID (string)
    string id = 1 [(tagger.tags) = "bson:\"_id,omitempty\""];
    // team or organization group UUID
    string group_id = 2 [(tagger.tags) = "bson:\"group_id,omitempty\""];

    // creation datetime in RFC3339 format
    google.protobuf.Timestamp created_at = 3 [(tagger.tags) = "bson:\"created_at,omitempty\""];
    // update datetime in RFC3339 format
    google.protobuf.Timestamp updated_at = 4 [(tagger.tags) = "bson:\"updated_at,omitempty\""];
    // last login at datetime in RFC3339 format
    google.protobuf.Timestamp last_login_at = 5 [(tagger.tags) = "bson:\"last_login_at,omitempty\""];
    
    commons.Status status = 6;
    Role role = 7;
    string email = 8;
    
    // multi factor authentication
    MFA mfa = 9;
    
    // the source from which the user was created (ex. mediawatch)
    string source = 10 [(tagger.tags) = "bson:\"source,omitempty\""];
    // the authorization from which the user was created (ex. google)
    string authorizer = 11 [(tagger.tags) = "bson:\"authorizer,omitempty\""];

    repeated Resource resources = 12;
    repeated Session sessions = 13 [(tagger.tags) = "json:\"-\""];;
    
    Profile profile = 14;

    bool deleted = 15;
}

message AccountWithFields {
    string id = 1;
    google.protobuf.Struct meta = 2;
}

message QueryAccount {
    string id = 1;
    int64 limit = 2;
    int64 page = 3;
}

message AccountList {
    repeated Account data = 1;
    commons.Pagination pagination = 2;
};

service AccountService {
    rpc Create (Account) returns (Account) {
        option (google.api.http) = {
            post : "/v3/accounts/create"
            body : "*"
        };
    };
    rpc Get (QueryAccount) returns (Account) {
        option (google.api.http) = {
            get : "/v3/accounts/get/{id}"
        };
    };
    rpc List (QueryAccount) returns (AccountList) {
        option (google.api.http) = {
            get : "/v3/accounts/list"
        };
    };
    rpc Update (Account) returns (commons.ResponseWithMessage) {
        option (google.api.http) = {
            put : "/v3/accounts/update/{id}"
            body : "*"
        };
    };
    rpc UpdateWithFields (AccountWithFields) returns (commons.ResponseWithMessage) {
        option (google.api.http) = {
            put : "/v3/accounts/update-with-fields/{id}"
            body : "*"
        };
    };
    rpc Delete (Account) returns (commons.ResponseWithMessage) {
        option (google.api.http) = {
            delete : "/v3/accounts/delete/{id}"
        };
    };
    rpc Verify (Account) returns (commons.ResponseWithMessage) {
        option (google.api.http) = {
            put : "/v3/accounts/verify/{id}"
            body : "*"
        };
    };
    rpc Reset (Account) returns (commons.ResponseWithMessage) {
        option (google.api.http) = {
            put : "/v3/accounts/reset/{id}"
            body : "*"
        };
    };
}